General Introduction:
    
    This program is a web-based online chat system that allows multiple users to communicate with each other through a common server. For instructions on how to start the chat system, look at README.md. The system is most easily used by opening several terminal windows on one device. But, it can also be used across multiple devices by using the arguments decribed in README.md. Users can specify an ID that other users will identify them by. When a user sends a message from their client window, it will be shown to all other users that are currently connected to the chat server.

Technical Detals:
	The chat system works by first creating a server on a specified port number (default is 8000). Clients then connect to the server by specifying and IP address and port number (defaults are localhost and 8000). When a client types a message and presses 'enter', the message is sent to the server through a buffer. The server will then forward that message to all other clients that are connected to the server. The same thing happens when a client disconnects from the server; a message is sent to all other clients indicating that a user has disconnected. The server can also be terminated by the system administrator. In this case, a message will be sent to all active clients indicating that the server is shutting down, and all open connections will be closeed.
	For a multi-client chat system to work with a singular server, clients must be able to both write and recieve messages simultanesouly. On a low level, this can be accomplished through multithreading. In my program, I used a higher level abstraction through C++'s 'future' type. The future type provides a method to make an asynchronous function call. So, in my program we asynchronously ask the user for input while simultaneously recieving any messages from the server. Once the asynchronous call returns, this indicates that the user has initiated a message send. The client sends the message to the server and the process plays out as decribed in the above paragraph. 
	Another important note is the use of select() in server.cpp. We use select() in conjuction with an fd_set that allows the server to monitor a recieving socket and multiple client sockets for activity. When a client requests a connection or sends a message to the server, select() will update the values in our fd_set indicating that some socket has performed an action. We then determine whether the action was a client requesting a connection, or sending a message and the server acts appropriately by either accepting the incoming connection and updating our data structures holding client info, or by forwarding the client messages to all other clients. 
